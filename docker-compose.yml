name: leopass

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: leopass
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ['dev', 'staging', 'prod']

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ['dev', 'staging', 'prod']

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      target: development
    environment:
      NODE_ENV: development
      PORT: 3000
    env_file:
      - .env
    ports:
      - '3000:3000'
    volumes:
      - ./api:/srv/app/api
      - ./package.json:/srv/app/package.json:ro
      - ./package-lock.json:/srv/app/package-lock.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ['dev']

  web:
    build:
      context: .
      dockerfile: web/Dockerfile
      target: development
    environment:
      NODE_ENV: development
      WEB_PORT: 5173
      VITE_API_URL: http://localhost:3000
    env_file:
      - .env
    ports:
      - '5173:5173'
    volumes:
      - ./web:/srv/app/web
      - ./package.json:/srv/app/package.json:ro
      - ./package-lock.json:/srv/app/package-lock.json:ro
    depends_on:
      api:
        condition: service_started
    profiles: ['dev']

  api-app:
    build:
      context: .
      dockerfile: api/Dockerfile
      target: production
    environment:
      NODE_ENV: production
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "fetch('http://localhost:3000/healthz',{cache:'no-store'}).then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
    profiles: ['staging', 'prod']

  web-app:
    build:
      context: .
      dockerfile: web/Dockerfile
      target: production
    depends_on:
      api-app:
        condition: service_started
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider --quiet http://localhost || exit 1']
      interval: 30s
      timeout: 5s
      retries: 5
    profiles: ['staging', 'prod']

  nginx:
    build:
      context: .
      dockerfile: infra/nginx/Dockerfile
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - nginx_certs:/etc/nginx/certs
      - ./infra/nginx:/etc/nginx/templates:ro
      - acme_challenge:/var/www/html
    depends_on:
      api-app:
        condition: service_healthy
      web-app:
        condition: service_healthy
    profiles: ['staging', 'prod']

volumes:
  pg_data:
  redis_data:
  nginx_certs:
  acme_challenge:
